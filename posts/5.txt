# A markdown killer, part 1 -- a sketch and a test framework

<time datetime='2013-01-08T12:31:07.000Z'></time>

In this post, we'll create an easier way to write the posts.

(Note: since this turned out to be a bit longer detour than I originally
intended, it's split into three posts.)

We might use a readymade markup language such as Markdown or Textile, but for
the sake of exercise we'll implement one ourselves.  It can't be that hard, can
it?

Our markup language will resemble Markdown closely.  Some features won't be
supported because HTML will do just fine (like horizontal rules, images, line
breaks); others we won't implement because they're not needed yet (like
nested lists); and some will look totally different because I think they should
look like they look in the browser (`/italics/`, `*bold*`, `_links_`); 

Unlike Markdown, which supports several different ways to emphasize text or to
write links, we'll just support a single way of doing things -- just to keep
things simple.

I expect the first version to be at least a bit buggy and missing some features
we will eventually require.  We'll revisit these shortcomings later.

## A feature list

I looked back at my experiences writing posts 1--4, and came up with the
following list of features that would have made writing them a lot easier.

* Paragraphs are separated by blank lines.  For simplicity, blank lines also
separate them from other elements, like lists, headings, and code blocks.
* A line starting with `#`, `##`, etc. becomes a heading: `<h1>`, `<h2>`, etc.
* HTML elements go through as-is (except when inside backtick quotes or code
blocks).  This includes top-level elements: a line starting with a HTML element
should start a top-level element, instead of being wrapped inside a `<p>`.
* Backticks (`\``) create `<code>` elements, and backslashes (`\\`) quote
backticks, themselves, and other markup-specific characters.
* The content in backticks and code blocks is escaped -- you can use `<` instead
of `&lt;` and `&` instead of `&amp;` and so on.  But elsewhere they are considered
raw HTML.  We may have to also escape elsewhere, as the `&` is often used in
body text, and mathematical text might make heavy use of `<` and `>`.  But let's
not do that yet.
* Code blocks are indented with 4 spaces.  Tabs are converted 4 spaces.  There
will be no tabs in the resulting HTML.  They behave just like `<code>` elements,
except being wrapped inside a `<pre>`.  A `*` in the beginning of a code block
line wraps that line inside a `<b>`.
* One or more words can be set `/in italics/` (which generates a `<i>` tag), or
`*in bold*` (which generates a `<b>` tag).
* Links are presented `_like this_ (http://url.to/link)`.  (The reason for being
different from Markdown `[link text](link url)` is that I'm simply not
psychologically compatible with the Markdown syntax.  It's as if `[]` and `()`
somehow fall into the same category in my brain and I never get them in the
correct order.)
* Unordered lists start with `* `.  Ordered lists start with `#. `.  We won't
support nested list items until we need them (that could be "never").
* Blockquotes are prefixed by `> `.  The contents of the blockquote will be
stripped off the `> ` prefix and then run through the markup filter; so
preformatted `<code>` blocks, multiple paragraphs, and other markup elements are
formatted as they are formatted outside blockquotes.
* It would be nice to be able to comment out lines.  I didn't come up with a
nice syntax for this yet.  `#` won't do since it's a heading at the start of
line; what will? `//`?  Will it interfere with italicization? Except inside code
blocks?
* Finally, to make it easier to write – and —, `--` is converted to
`&ndash;` and `---` to `&mdash;`.

## The first hints of modularity

We'll make Markdown Killer (the name of the markup language until someone comes
up with a better one) a module so it can be reused.  It goes to `lib/mk.js`:

	function mk(text) {
		// here goes the implementation
	}

	module.exports = mk;

In `server/run.js`, we use it:

	var fs = require('fs');
*	var mk = require('../lib/mk');
    
	var env = process.env.BLOG_ENV == 'dev' ? 'dev' : 'prod'

We decide to give the `.txt` extension to posts written in Markdown Killer, to
make it easier to tell them apart from raw HTML posts.  This requires some
changes in the code:

	var filenames = fs.readdirSync(__dirname + "/../posts");

*	var postFiles = filenames.filter(function(filename) {
*		return filename.match(/^\d+(\.txt)?$/);
*	}).map(function(filename) {
*		var match = filename.match(/^(\d+)(\.txt)?$/);
*		return {
*			id: match[1],
*			filename: filename,
*			type: match[2] == '.txt' ? 'mk' : 'html'
*		};
*	});

*	postFiles.sort(function(a, b) { return Number(a.id) - Number(b.id); });
*	var latestPostId = postFiles[postFiles.length - 1].id;

	var posts = Object.create(null);

*	postFiles.forEach(function(postFile) {
*		posts[postFile.id] = readPost(postFile.filename, postFile.type);
	});

and later (`id` is just renamed to `filename`)

*	function readPost(filename, type) {
*		var content = fs.readFileSync(__dirname + "/../posts/" + filename, "utf-8");
*		content = filter(content, type);
		var title = titleMatch ? titleMatch[1] : "no title";

Finally, `filter` is:

	function filter(post, type) {
		if (type == 'mk') {
			return mk(post);
		} else {
			return post;
		}
	}

We try it out by making `mk` showing the post in plain text, which requires a
function that escapes HTML:

	function escape(text) {
		return text
			.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&#39;');
	}

	function mk(text) {
		return "<pre>" + escape(text) + "</pre>";
	}

Now, assuming that we have a file `posts/5.txt`, we should see its contents in
plain text by navigating to `http://localhost:3000/5`.

## Testing the markup engine

Markup engines are good candidates for unit testing.  In our spirit of
reinventing the wheel, we'll implement a simple unit testing framework.  We
create a file called `test` and write a simple function, `assert.is`, that
asserts that two values are the same.

	#!/usr/bin/env node

	assert = {
		is: function(lhs, rhs) {
			if (lhs !== rhs) {
				throw new Error('Got "' + lhs + '",\nExpected:  "' + rhs + '"');
			}
		}
	} 

To test it, try adding these lines to the `test` and running it (do `chmod +x
test` first):

	assert.is(1 + 2, 3);
	assert.is(1 + 2, 4);

You should get a stack trace telling which line is the faulty one, and what was
the expected value:

	% ./test 

	/Users/antti/work/blog/test:6
				throw new Error('Got "' + lhs + '",\nExpected:  "' + rhs + '"');
					  ^
	Error: Got "3",
	Expected:  "4"
		at Object.assert.is (/Users/antti/work/blog/test:6:10)
		at Object.<anonymous> (/Users/antti/work/blog/test:12:8)

Note how the actual and expected values are aligned on the same column so that
we can better compare differences between the two values -- this will prove
useful with strings containing newlines and whitespaces.  

Since our underlying JavaScript engine is V8, we can make the error message even
more useful.  For that we'll make use of _structured stack traces_ (http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi).  We have to
jump through a couple of hoops to get access to them:

First, instead of throwing an exception, we call `error` that handles
everything:

			if (lhs !== rhs) {
				error('Got "' + lhs + '",\nExpected:  "' + rhs + '"');
			}

`error` first prints out the error message:

	function error(msg) {
		console.log("Error: " + msg);

Next, it redefines `Error.prepareStackTrace` to make use of the V8's structured
stack trace.  After this function is in place, the `stack` property of any
`Error` object will contain the actual stack trace instead of a string value.  

		Error.prepareStackTrace = function(e, stackTrace) {
			return stackTrace;
		};

We then create a new `Error` object, which comes with the stack trace.  The
first call site that interests us is at index 2.  (The topmost is in `error()`
the next one in `assert.is()` -- we don't want to see either.)

		var err = new Error();
		var callSite = err.stack[2];

The call site provides us with the file and line that caused the error.  We
slurp in its contents:

		var filename = callSite.getFileName();
		var file = require('fs').readFileSync(callSite.getFileName(), 'utf8');

We show the user the filename _relative_
(http://nodejs.org/api/path.html#path_path_relative_from_to) to the current
directory to reduce excess verbosity:

		var relative = require('path').relative(process.cwd(), filename);
		var line = callSite.getLineNumber();
		var column = callSite.getColumnNumber();

		console.log("\nFile: " + relative);
		console.log("Line: " + line);

The following extracts the line where the error happened and replaces tabs with
a single space.  This is necessary to pinpoint the exact location of the error,
since `callSite.getColumnNumber()` counts tabs as one character wide.

The other line draws a caret at the point where the error happened.  It lets us
to use the JavaScript trick `Array(n).join(' ')` to repeat a space character
`n-1` times.

		console.log("\n" + file.split('\n')[line-1].replace(/\t/g, ' '));
		console.log(Array(column).join(' ') + "^");

Lastly, we print the stack trace (starting from index 2) and exit.

		err.stack.splice(0, 2);
		console.log("\n" + err.stack.join('\n'));
		process.exit(1);
	}

The end result is now much more informative:

	% ./test
	Error: Got "3",
	Expected:  "4"

	File: test
	Line: 41

	assert.is(1 + 2, 4);
		   ^

	Object.<anonymous> (/Users/antti/work/blog/test:42:8)
	...

The `error` function is forced to reimplement much of the existing Node.js error
reporting code, since instead of the boring old `new Error(...)`, we wanted to
display code from a bit deeper in the call stack.  That's too bad, but now that
it's done, let's start testing.

## Tests, finally

We'll start writing (and testing) the markup engine in parts.  First, to ensure
that the tests are being run, we change `run.sh` to exercise the tests:

	export BLOG_ENV=dev

*	while ./test && ./server/run.js; do true; done

Running `run.sh` once reminds us to to to remove the failing assert.  Now we're
ready to proceed with _the actual implementation_ (/6).

