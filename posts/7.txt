# A markdown killer, part 3 -- inline elements and quoting

<time datetime='2013-01-12T12:31:07.000Z'></time>

In this last part, we process the inline elements: `*bold*`, `*italics*`,
`_links_ (url)`, translate certain characters to HTML character references, and
wrap it all together.  These are handled by `filter` function that is called
whenever a textual passage is encountered.

We define functions for detecting and translating different kinds of
formatting, writing stubs that do nothing for a start:

	function codify(text) {
		return text;
	}

	function italicize(text) {
		return text;
	}

	function boldify(text) {
		return text;
	}

	function linkify(text) {
		return text;
	}

	function dashify(text) {
		return text;
	}

To implement `filter`, we expect these functions to be called in sequence.  The
sequence I'm thinking about is `codify` &rarr; `italicize` &rarr; `boldify`
&rarr; `linkify` &rarr; `dashify`.  `codify` needs to come first since it
determines which
pieces of text will be run through the rest of the filters, and which pieces
will be treated as code.  The order of the others is probably pretty much
arbitrary.

But let's first test them separately.

## Codify

	assert.is(mk.codify('a `span` of `<code>`'), 'a <code>span</code> of <code>&lt;code&gt;</code>');
	assert.is(mk.codify('`a && b << 2 + ""`'), '<code>a &amp;&amp; b &lt;&lt; 2 + &quot;&quot;</code>');

To `codify`, we first find the parts that are surrounded by backticks, run them
through the `escape` function introduced earlier, and wrap them inside a `<code>` element:

	function codify(text) {
		var pattern = /`(.*?)`/g;
		return text.replace(pattern, function(match, p1) {
			return '<code>' + escape(p1) + '</code>';
		});
	}

But then we need to process the text outside `<code>`.  Let's make that part of
`filter`:

	function filter(text) {
		var codified = codify(text);

		var restPattern = /(^|<\/code>)([^]*?)(<code>|$)/g;
		return codified.replace(restPattern, function(match, p1, p2, p3) {
			return p1 + normalText(p2) + p3;
		});
	}

	function normalText(text) {
		return dashify(linkify(boldify(italicize(text))));
	}

This looks for text sequences starting with `</code>` (or the start of the string)
and ending with `<code>` (or the end of the string).  The text in between is
matched with `[^]*?`, or 'any character (including newline) any number of times,
non-greedily'.  The text in between is then passed to `normalText`, which
handles the rest.

	assert.is(mk.codify('`/foo_bar/ & 1` looks like /foo_bar/ & 1'), '<code>&sol;foo&lowbar;bar&sol; &amp; 1</code> looks like /foo_bar/ &amp; 1');

The only thing still missing of `codify` is the quoting of backticks (and
slashes); we'll revisit that later.

## Italicize

(Warning: this section is a bit heavy on regular expressions.  And it's just a
prelude to what's coming later when we get to URL matching.)

To italicize, we must first decide how an `/italic/` block can start and how
it can end.  We want the slashes to work outside sequences of words:

	assert.is(mk.italicize('Its /italic/, /and this/.'), 'Its <i>italic</i>, <i>and this</i>.');

We check that a sequence of italics work:

	assert.is(mk.italicize('/a/ /b/ /c/ /d/'), '<i>a</i> <i>b</i> <i>c</i> <i>d</i>');

Also inside parentheses and other punctuation (and outside, even though that's
against the typographical convention (TODO insert Bringhurst reference)):

	assert.is(mk.italicize('(/This, too/.)'), '(<i>This, too</i>.)');
	assert.is(mk.italicize('/(This, too.)/'), '<i>(This, too.)</i>');
	assert.is(mk.italicize('/Really/?'), '<i>Really</i>?');
	assert.is(mk.italicize('/Really!/'), '<i>Really!</i>');

Slashes inside italicized blocks should go unmodified, as should slashes that
don't touch any words.  (There should be no need to italicize white space.)

	assert.is(mk.italicize('This is /A/B testing/!'), 'This is <i>A/B testing</i>!');
	assert.is(mk.italicize('This is not: and/or/something'), 'This is not: and/or/something');
	assert.is(mk.italicize('1 / 2 * 3 / 4 + /a / b / c/.'), '1 / 2 * 3 / 4 + <i>a / b / c</i>.');

Another test to check that it starting and ending slash works:

	assert.is(mk.italicize('/Italic/ starts, /in middle/, /ends/'), '<i>Italic</i> starts, <i>in middle</i>, <i>ends</i>');

It seems that what we want is to find a slash following something else than a
word character and then for a slash preceding something else than a word
character. 

Finding and replacing these with a regular expression will probably get things
done quickly and easily enough.  So let's start with that.

Since JavaScript regular expressions have the handy `\B` shorthand for matching
non-word boundaries, we'll use them:

	function italicize(text) {
		var pattern = /\B\/(.*)\/\B/g;
		return text.replace(pattern, '<i>$1</i>');
	}

We could also match a non-word character `\W` directly, but then we'd have to
also handle the case when the starts or ends with a `/`.  `\B` handles that case
as well (string boundaries are considered non-word characters).

This gets us through until `/a/ /b/ /c/ /d/`, which gets translated to 
`<i>a/ <i>b/ /c</i> /d</i>`.  Oops, we needed to use the _non-greedy matcher_
(https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions#Using_Special_Characters)
to prevent the whole string from being matched at once:

		var pattern = /\B\/(.*?)\/\B/g;

This lets us through a couple of tests, but now we have the problem of at `1 / 2
* 3 / 4` turning into `1 <i> 2 * 3 </i> 4`.  So we'd like to prevent slashes
surrounded by white space to be not matched.  That can be done using regular
expressions, but it's simpler to follow a slightly stricter policy: a slash
/followed/ by white space cannot be matched as the starting slash, regardless of
what preceded it.

We'll use a /negated lookahead/ pattern `(?!\s)` after the initial character
(which means 'match `/` only if not followed by `\\s`'):

		var pattern = /\B\/(?!\s)(.*?)\/\B/g;

The ending slash should follow a similar rule in the other direction: white
space may not precede it.

		var pattern = /\B\/(?!\s)(.*?[^\s])\/\B/g;

As a side effect, `//` is not translated to `<i></i>` any more, since the
pattern now requires at least one (non-space) character in between the slashes.
We add that to the tests.

	assert.is(mk.italicize('A // comment?'), 'A // comment?');

Do we support newlines?

	assert.is(mk.italicize("across /the\nnewline/, too"), "across <i>the\nnewline</i>, too");

Whoops, we do not: let's replace `.` with `[^]` that also matches newlines.

		var pattern = /\B\/(?!\s)([^]*?[^\s])\/\B/g;

There are still (at least) two special case we need to tackle: HTML end tags such
as `</code>`, and URLs such as `http://foo.com/`.  

	assert.is(mk.italicize('<code>printf()</code> w/ extra sauce'), '<code>printf()</code> w/ extra sauce');
	assert.is(mk.italicize('https://this.is.url.com/'), 'http://this.is.url.com');
	assert.is(mk.italicize('file:///path.to/some/file/'), 'file:///path.to/some/file/');

The close tag is avoided by changing the beginning of the regular expression to
match a non-`<` character, that is: `[^<]`.  Alternatively, we match the
beginning of the string.

		var pattern = /([^<]|^)\B\/(?!\s)([^]*?[^\s])\/\B/g;

The replacement will have to be changed to

		return text.replace(pattern, '$1<i>$2</i>');

so we don't lose a character.

And the URL case will be handled by also avoiding `:` and `\/` before the
starting and ending `\/`:

	var pattern = /([^<:\/]|^)\B\/(?!\s)([^]*?[^:\/\s])\/\B/g;

A notable weakness in this notation is that we cannot discern pathnames like
`It's located in /usr/share/lib/{dirname}` from genuine italicizations like
`Strunk & White strongly advise against using /and/or/.`  We console ourselves
with the fact that directory names are likely enclosed in `\``'s, anyway.

Now all tests pass and we can give this minor monstrosity the permission to
get to work.  At least until some brave maintenance programmer comes digging.

## Boldify

To make things that look `*like this*` bold, i.e. wrapping them inside `<b>`
tags, we do almost exactly the same as with `italicize`.

We write a couple of tests:

	assert.is(mk.boldify('*this is bold*'), '<b>this is bold</b>');
	assert.is(mk.boldify('*this* *too* *is*'), '<b>this</b> <b>too</b> <b>is</b>');
	assert.is(mk.boldify('*multiple words*'), '<b>multiple words</b>');
	assert.is(mk.boldify('inside *a sentence* works'), 'inside <b>a sentence</b> works');

	assert.is(mk.boldify('but 2 * 3 * 4 is not *bold*'), 'but 2 * 3 * 4 is not <b>bold</b>');
	assert.is(mk.boldify('nor is a*b*c nor a*b* nor *a*b'), 'nor is a*b*c nor a*b* nor *a*b');

and take a simpler version of `italicize`, replacing slashes with asterisks: 

	function boldify(text) {
		var pattern = /\B\*(?!\s)([^]*?[^\s])\*\B/g;
		return text.replace(pattern, '<b>$1</b>');
	}

The tests pass; we are ready to move on, but not before noting a corner case
that might warrant our attention: what happens if the user writes overlapping
codes like `*this _sentence is* invalid_`?  A more robust markup language might
do some error handling, but we don't -- instead we generate invalid HTML.  If
the user wants to shoot herself in the foot, let her do it.

	assert.is(mk.boldify(mk.italicize('*this /sentence is* invalid/')), '<b>this <i>sentence is</b> invalid</i>');
	assert.is(mk.italicize(mk.boldify('*this /sentence is* invalid/')), '<b>this <i>sentence is</b> invalid</i>');

## Linkify

A link is an underlined sequence of text, followed by whitespace and
parentheses.  
We'll start with a special case: a link without an URL.  Since HTML5 allows
/placeholder URLs/ without a `href`, we'll generate those:

	assert.is(mk.linkify('_previous_ and _next_'), '<a>previous</a> and <a>next</a>');

And the function to recognize this is easily derived from the earlier ones: we
only have to switch `\\B` to `\\b` since underscore is a word character.

	function linkify(text) {
		var pattern = /\b_(?!\s)([^]*?[^\s])_\b/g;
		return text.replace(pattern, '<a>$1</a>');
	}

Then we add support for the URL:

	assert.is(mk.linkify('_Google_ (http://google.com/)'), "<a href='http://google.com/'>Google</a>");

And for extra points make sure that the URL is escaped properly:

	assert.is(mk.linkify("_Google_ (http://google.com/?q=foo&x='abc')"), "<a href='http://google.com/?q=foo&amp;x=&#39;abc&#39;'>Google</a>");

To satisfy these tests, the new `linkify` looks like:

	function linkify(text) {
*		var pattern = /\b_(?!\s)([^]*?[^\s])_(?:\s*\((.*?)\)|\b)/g;
*		return text.replace(pattern, function(match, p1, p2) {
*			var href = p2 ? " href='" + escape(p2)+ "'" : "";
*			return '<a' + href + '>' + p1 + '</a>';
*		});
	}

The regular expression is augmented to alternatively accept white space followed
by a parenthesized URL.  Only the relevant parts of the pattern, the URL and the
link text, are captured, and to group the parts we don't want to capture, we use
our old friend, the non-capturing parentheses `(?:x)`.  We use a non-greedy
match for the URL to avoid capturing too much by accident.

We need to a different form of the `replace` function that takes a function and
invokes it for each match.  It performs the necessary translation and returns
the desired result.

The tests pass, but what about URLs that contain parentheses?  These are
relatively common in URLs like
`http://en.wikipedia.org/wiki/Bracket_(mathematics)`.  Let's add some of these
to our test cases:

	assert.is(mk.linkify("_A (band)_ (http://en.wikipedia.org/wiki/A_(band))"), "<a href='http://en.wikipedia.org/wiki/A_(band)'>A (band)</a>");
	assert.is(mk.linkify("_Law (band)_ (http://en.wikipedia.org/wiki/Law_(band)_(disambiguation))"), 
	assert.is(mk.linkify("_Hypothetical URL_ (http://eval.com/(+ 1 (+ 2 3))"), 

Unfortunately, the power of regular expressions does not let us match an
arbitrary number of symmetrical parentheses.  But we can do it for a given
amount of nested parentheses.  This will get complicated, so we'll
develop the nested parentheses part separately.  

Since angle brackets `<>` are easier to read in regular expressions than the
usual ones that must be escaped, we'll use them during construction and then
replace them with `\\(` and `\\)`.

We'll do this construction by writing the regular expression in the `test` file
and doing assertions directly there.

To read a matching pair of angle brackets with no brackets inside, we need to
make sure to use the non-matching repeater:

	var bracketMatcher = function(string) {
		var pattern = /<(.*?)>/;
		var match = string.match(pattern);
		return match ? match[1] : null;
	}

This ensures that basic cases like

	assert.is(bracketMatcher('<hello>'), 'hello');
	assert.is(bracketMatcher('a <b> c'), 'b');
	assert.is(bracketMatcher('a <first> <second> c'), 'first');

work; but if we want to be strict about the insides of the bracket (we'll soon
see why), we'll want to avoid matching nested brackets:

	assert.is(bracketMatcher('<less <than>'), '<than>');

For this to pass, we'll extend our pattern to only match non-bracket characters
inside brackets.

		var pattern = /<([^<>]*)>/;

Next we want to match nested brackets:

	assert.is(bracketMatcher('<a <b> c>'), 'a <b> c');

Since that's just "anything followed by bracketed expression followed by
anything," let's write that down as a regular expression.  Assuming "anything"
means "anything that is not a bracket."

		var pattern = /<([^<>]*<[^<>]*>[^<>]*)>/;

While this would work for the latest test, the first test cases fail; we need to
make the inner brackets optional, so our match is now "anything followed by an
optional bracketed expression followed by anything":

		var pattern = /<([^<>]*(?:<[^<>]*>)?[^<>]*)>/;

To support multiple brackets, this not enough:

	assert.is(bracketMatcher('<a <b> and <c> d>'), 'a <b> and <c> d');

We realize it actually needs to be "(anything followed by bracketed expression)
any number of times, followed by anything", where any number of times includes
zero.

		var pattern = /<((?:[^<>]*<[^<>]*>)*[^<>]*)>/;

Now to support two levels of nesting,

	assert.is(bracketMatcher('<a <b <c> <d> e> and <f <g> h> i>'), 'a <b <c> <d> e> and <f <g> h> i');

we replace the `[^<>]*` inside the innermost brackets with the thing that
represents "(anything followed by bracketed expression) any number of times,
followed by anything", that is, `(?:[^<>]*<[^<>]*>)*[^<>]*`, and get the
following:

		var pattern = /<((?:[^<>]*<(?:[^<>]*<[^<>]*>)*[^<>]*>)*[^<>]*)>/;

To make that it works with strange corner cases and counts the brackets right to
two levels of nesting, we still do some more testing:

	assert.is(bracketMatcher('<<<>>>'), '<<>>');
	assert.is(bracketMatcher('<<<<>>>>'), '<<>>');
	assert.is(bracketMatcher('<<<<><><>>>>'), '<<><><>>');
	assert.is(bracketMatcher('<foo<bar>>>>'), 'foo<bar>');
	assert.is(bracketMatcher('<<<<foo<bar>>'), 'foo<bar>');
	assert.is(bracketMatcher('<4<3<2<1'), null);
	assert.is(bracketMatcher('<4<3<2<1>'), '1');
	assert.is(bracketMatcher('<4<3<2<1>>'), '2<1>');
	assert.is(bracketMatcher('<4<3<2<1>>>'), '3<2<1>>');
	assert.is(bracketMatcher('<4<3<2<1>>>>'), '3<2<1>>');

The last one also documents the limits of the matcher.

Now we can take a deep breath, take the abomination we just created, replace
brackets with quoted parentheses, and replace the parentheses-matching part of
the URL matcher with that.

	var pattern = /\b_(?!\s)([^]*?[^\s])_(?:\s*\(((?:[^\(\)]*\((?:[^\(\)]*\([^\(\)]*\))*[^\(\)]*\))*[^\(\)]*)\)|\b)/g;

With that, the URL with two levels of parentheses is matched correctly, but
three levels fails:

	assert.is(mk.linkify("_This fails_ (http://eval.com/(+ 1 (+ 2 (+ 3 4))))"), "<a>This fails</a> (http://eval.com/(+ 1 (+ 2 (+ 3 4))))");

We'll live with that restriction (at least until we decide to use some other
technology than regular expressions to do the matching).

## Dashify

Finally we replace the dashes, taking care to avoid HTML comments and sequences
of longer than three dashes:

	assert.is(mk.dashify('-- stuff---more --'), '&ndash; stuff&mdash;more &ndash;');
	assert.is(mk.dashify('<!-- comment --> -- not touched'), '<!-- comment --> &ndash; not touched');
	assert.is(mk.dashify('a longdash-----is not touched'), 'a longdash-----is not touched');

And the implementation:

		function dashify(text) {
			var pattern = /(^|[^!-])(---?)([^->]|$)/g;
			return text.replace(pattern, function(match, p1, p2, p3) {
				return p1 + '&' + (p2.length === 2 ? 'n' : 'm') + 'dash;' + p3;
			});
		}


## What's missing?

We now find some deficiencies in our implementation.

Code blocks that have blank lines in the middle get split up (even if they're
indented with 4 spaces).  Understandable, given that the first thing we do is
run `trim` to blank out all whitespace-only lines, and then use `\\n\\n` as a
separator.  But not acceptable.  Consecutive code blocks need to be rejoined
after splitting:

	function mk(text) {
		var preprocessed = untabify(trim(text));
*		var parts = joinCodeBlocks(split(preprocessed));
		var converted = parts.map(handle);
		return converted.join('\n') + '\n';
	}

`joinCodeBlocks` joins the league of functions that are not particularly
elegant, but work:

	function joinCodeBlocks(parts) {
		var result = [];
		for (var i = 0, len = parts.length; i < len; i++) {
			var part = parts[i];
			if (result.length) {
				prevIdx = result.length - 1;
				if (type(part) == 'codeBlock' && type(result[prevIdx]) == 'codeBlock') {
					result[prevIdx] += '\n    \n' + part;
					continue;
				} 
			}
			result.push(part);
		}
		return result;
	}

and a test for that:

	assert.is(mk("    int x;\n    \n    x = 1;"), "<pre><code>int x;\n\nx = 1;</code></pre>\n");

Another problem is that we can't yet quote backticks `\`` inside `<code>`
expressions.  The current pattern isn't quite enough:

		var pattern = /`(.*?)`/g;

Let's first write some tests:

	assert.is(mk('`\\``'), '<code>`</code>');
	assert.is(mk('`\\`` `\\\\` `\\\\\\``'), '<code>`</code> <code>\\</code> <code>\\`</code>');

We'll change the pattern so it doesn't consume the combination `\\\``:

	function codify(text) {
*		var pattern = /`([^\\`]*(?:\\.[^`\\]*)*)`/g;
		return text.replace(pattern, function(match, p1) {
*			return '<code>' + escapeCode(p1) + '</code>';
		});

Inside the outermost `\``s, we first read a string containing neither `\\`s nor
`\``s.  When we encounter a `\\` followed by a character that it quotes, we
consume it and the following a string that doesn't have `\``s or `\\`; and this
we do N times, until we find the terminating `\``.

Codify will now use `escapeCode`, a slightly modified `escape` that strips off
backslashes used for quoting:

	function escapeCode(text) {
		return escape(text)
			.replace(/\\(.)/g, '$1');
	}

And so the tests pass again.

Quoting will be useful also outside code elements:

	assert.is(mk('A \\` outside a code block'), "A ` outside a code block");

This necessitates a change in `codify`, again:

	function codify(text) {
*		var pattern = /([^\\]|^)`([^\\`]*(?:\\.[^`\\]*)*)`/g;
*		return text.replace(pattern, function(match, p1, p2) {
*			return p1 + '<code>' + escapeCode(p2) + '</code>';
		});
	}

Now it needs a non-backslash character (or the beginning of string) in front of
it.  It will be inserted in front of the generated code block.

(Note that code blocks still use the normal `escape` -- there is no need to
escape anything there.)

## Don't format what doesn't need formatting (i.e. HTML)

Finally, we need to support inline HTML elements and character references. For
that, `normalText` must be modified.  Let's start with the character references
and filter the text through `escapeSome`.

	function normalText(text) {
*		var escaped = escapeSome(text);
		return dashify(linkify(boldify(italicize(escaped))));
	}

`escapeSome` first runs the input through `escape`, and then, knowing that all
ampersands were turned into `&amp;`, finds out the sequences that were
_character references_ (http://developers.whatwg.org/syntax.html#syntax-charref)
once:

	function escapeSome(text) {
		var escapedCharacterReference = /&amp;(#(?:x?[0-9]+)|(?:[a-zA-Z]+?));/gi;
		return escape(text).replace(escapedCharacterReference, '&$1;');
	}

This feels like a hack but, again, works.  A test to exercise the different character
references:

	assert.is(mk.filter('&#123;, &RightUpVector;, &#x2020;, but &auml'),
'&#123;, &RightUpVector;, &#x2020;, but &amp;auml');

HTML tags are a bit more work.  We're not interested in the tags themselves: we
want things like `<a data-whatever='*stuff*'>` to pass as-is, and the text in
between them to be escaped.  So we use a similar technique as we did with
`codify` to replace the text that is delimited by HTML tags.  (Strictly
speaking, this is not enough; ideally we'd also like attribute values like
`href='/?a=1&c=2'` to be escaped, but Markdown doesn't do this either.  So perhaps
it's better to keep in the "HTML is HTML" mindset.)

Deciphering the syntax for _HTML start and end tags_ (http://developers.whatwg.org/syntax.html#start-tags) a while, we find the following:

A HTML start tag ends with a `>`, preceded by optional `/`, optional whitespace,
and either a tag name (alphanumeric), an attribute name, or an attribute value.
Attribute names may end with anything except the following characters (ignoring
the null character): `"'>/=`.  Attribute values, quoted or unquoted, may end
with anything except the following characters: `=<>\``.  Thus the last character
before the optional whitespace may be anything except an `=` or a `>`.  Although
the validators that I checked didn't allow `<` in attribute names, either, so
let's include that as well.  So this pattern matches the possible endings of a
tag:

	[^=<>]\s*>

(We don't have to take into account the optional slash separately, since this
pattern matches `/>` already.)

A HTML end tag always ends with `/>`, and is therefore caught by the previous
pattern as well.

To match the start of a HTML tag, we look for a `<`, followed by an optional `/`
(which makes it an end tag) and an element name.  But we must avoid matching the
element name, so that it can be part of the next match.  Consider the case
`<span>&<i>&<b>` -- we must take care that the end of the first match doesn't
overlap the beginning of the next match.  The word boundary character `\b` comes
to rescue.  Here's the pattern, then:

	<\/?\b

So here's a pattern for matching text outside HTML tags:

		var betweenPattern = /(^|[^=<>]\s*>)([^]*?)(<\/?\b|$)/g;

and `escapeText` in whole:

	function normalText(text) {
		// Find text between things that look like HTML tags.
		var betweenPattern = /(^|[^=<>]\s*>)(.*?)(<\/?\b|$)/g;

		return text.replace(betweenPattern, function(match, p1, p2, p3) {
			var betweenText = escapeSome(p2);
			return p1 + dashify(linkify(boldify(italicize(betweenText)))) + p3;
		});
	}

We can now enable the previously disabled test and write some more:

	assert.is(mk.filter("0 <a href='/get?x=1&y=2'>link</a>"), "0 <a href='/get?x=1&y=2'>link</a>");
	assert.is(mk.filter("<i data-etc='&c.' data-name='*this*'>*that* &c.</i>"), "<i data-etc='&c.' data-name='*this*'><b>that</b> &amp;c.</i>");
	assert.is(mk.filter('<span>&<span>&<span>'), '<span>&amp;<span>&amp;<span>');

The HTML tag recognizer is not terribly strong, so it's quite possible that it
matches non-tags, too:

	assert.is(mk.filter("if 0<x, I'm *so* going to make this face >_< - I /am/"), "if 0<x, I'm *so* going to make this face >_&lt; - I <i>am</i>");

In this case, it thinks that everything between `<x` and `face >` is a HTML tag
and leaves its content unprocessed.  Whether this will cause terrible problems
remains to be seen.

## Had we just used Markdown

We might have just taken _marked_ (https://npmjs.org/package/marked), a popular
implementation of Markdown, out of the box and used it.  Indeed, Markdown is a
stable language, and `marked` is a stable Markdown processor optimized for
speed.

It would have been faster, stabler, and no fun at all.  But Markdown provides a
good performance target.  <span class=aside>In my tests, `marked` is about twice
as fast: it processed a 48kB test input in 3.1 milliseconds, while `mk` spent
6.9 milliseconds.  So there's some room for optimization.</span> (In addition,
it has things like sanitization and _GFM features_
(http://github.github.com/github-flavored-markdown/).) But then again, we wanted
a bespoke lightweight markup language, and that's what we've got.

## Conclusion

At the end, while it seems to work, it's not very well performing, and probably
still bug-ridden, but at least we have a test suite.  There are only so many
bugs that can fit inside one markup language implementation, and the amount of
new bugs introduced by fixing one bug is still much less than one, so eventually
our implementation will converge to a more or less bug-free one.

## Exercises 

* Make sure that the tests are run in production as well. Is this a good idea
to do during the deployment, or whenever the server is started?
* Some performance testing
* Implement list items that can span multiple lines:

    * This line contains a long description that wants to extend to the next line,
      in which case we indent it a bit.
    * And here is the second item.

* Implement nested list items.
* Write a function that writes a RegExp that recognizes a given number of nested
parentheses.
* Make it possible to escape `*`, `_`, `(`, `)` and `/` outside `<code>`
elements.



